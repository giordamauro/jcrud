<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/util 
						http://www.springframework.org/schema/util/spring-util-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/jee 
						http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<context:annotation-config />

	<context:property-placeholder location="classpath:/context/application.properties" />
		
	<!-- Database Configuration -->
	<import resource="hibernateContext.xml"/>
	
	
	<bean id="gsonBuilder" class="com.google.gson.GsonBuilder"/>
    
    <bean id="bytesDeserializer" class="com.jcrud.utils.json.DataTypeJsonDeserializer">
		<constructor-arg type="java.lang.Class" value="byte[]"/>
		<constructor-arg type="java.util.Map">
			<util:map>
				<entry key="plain">
					<bean class="com.jcrud.utils.json.deserializers.StringJsonDeserializer"/>
				</entry>
				<entry key="base64">
					<bean class="com.jcrud.utils.json.deserializers.Base64JsonDeserializer"/>
				</entry>
			</util:map>
		</constructor-arg>
	</bean>
		
	<bean id="filterDeserializer" class="com.jcrud.utils.json.DataTypeJsonDeserializer">
		<constructor-arg type="java.lang.Class" value="com.apimock.dao.MockRequestEvaluatorEntity"/>
		<constructor-arg type="java.util.Map">
			<util:map>
				<entry key="request">
					<bean class="com.apimock.impl.QueryHeaderEvaluatorJsonDeserializer"/>
				</entry>
				<entry key="spring">
					<bean class="com.jcrud.utils.json.deserializers.SpringJsonDeserializer">
						<constructor-arg type="java.lang.Class" value="com.apimock.model.MockRequestEvaluator" />
					</bean>
				</entry>
				<entry key="composite">
					<bean class="com.jcrud.utils.json.deserializers.ImplementationJsonDeserializer">
						<constructor-arg index="0" value="com.apimock.dao.MockRequestEvaluatorEntity"/>
						<constructor-arg index="1" value="com.apimock.dao.evaluators.CompositeEvaluatorEntity"/>
					</bean>
				</entry>
			</util:map>
		</constructor-arg>
	</bean>
	
	<bean id="bytesJsonSerializer" class="com.jcrud.utils.json.serializers.BytesJsonSerializer"/>
	<bean id="mockRequestEvaluatorSerlializer" class="com.apimock.impl.MockRequestEvaluatorJsonSerializer" />
	
	<bean id="gson" class="com.jcrud.utils.json.GsonFactoryBean">
		<constructor-arg type="com.google.gson.GsonBuilder" ref="gsonBuilder" />
		<constructor-arg type="java.util.List" index="1">
			<util:list>
		        <ref bean="bytesDeserializer"/>
		        <ref bean="filterDeserializer"/>
		    </util:list>
		</constructor-arg>
		<constructor-arg type="java.util.List" index="2">
			<util:list>
		        <ref bean="bytesJsonSerializer"/>
		        <ref bean="mockRequestEvaluatorSerlializer"/>
		    </util:list>
		</constructor-arg>
	</bean>

	<bean id="jsonTypeAdapter" class="com.jcrud.parsers.JsonTypeAdapter">
		<constructor-arg type="com.google.gson.Gson" ref="gson"/>
	</bean>
	
	<bean id="xmlTypeAdapter" class="com.jcrud.parsers.XmlTypeAdapter"/>

	<bean id="rootTypeAdapter" class="com.jcrud.parsers.DispatcherTypeAdapter">
		<constructor-arg type="java.util.Map">
			<util:map>
				<entry key="application/json" value-ref="jsonTypeAdapter"/>
				<entry key="application/xml" value-ref="xmlTypeAdapter"/>
			</util:map>
		</constructor-arg>
	</bean>

	<bean id="genericDao" class="com.jcrud.jpa.GenericDaoImpl" >
   		<property name="sessionFactory" ref="sessionFactory"/>
   </bean>


	<bean id="mockDispatcher" class="com.apimock.servlet.impl.MockDispatcherImpl">
		<constructor-arg>
			<bean class="com.apimock.impl.MockRepositoryConsumerImpl">
				<constructor-arg>
					<bean class="com.apimock.impl.MockRepositoryImpl">
						<constructor-arg ref="genericDao"/>
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="defaultRestHandler" class="com.jcrud.impl.DaoRestHandler" >
   		<constructor-arg type="com.jcrud.jpa.GenericDao" ref="genericDao"/>
   </bean>
   
	<bean id="restHandlerFactory" class="com.jcrud.impl.BasicRestHandlerFactory">
		<constructor-arg type="com.jcrud.model.RestHandler" ref="defaultRestHandler"/>
	</bean>
	
	
	<bean id="crudDispatcher" class="com.jcrud.impl.CRUDDispatcherImpl">
		<constructor-arg type="java.util.Map">
			<util:map>
				<entry key="/persons" value-type="java.lang.Class" value="com.jcrud.impl.stub.Person"/>
				<entry key="/_admin" value-type="java.lang.Class" value="com.apimock.dao.MockDataEntity"/>
			</util:map>
		</constructor-arg>
	</bean>

	<bean id="crudServletAdapter" class="com.jcrud.servlet.impl.CRUDServletAdapterImpl"/>

	<bean id="reseasyServlet" class="org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher"/>
   	<bean id="crudServlet" class="com.jcrud.servlet.CRUDServletContainer"/>       
	

</beans>